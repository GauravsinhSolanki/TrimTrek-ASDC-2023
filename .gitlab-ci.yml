# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

backend-build-job:       # This job runs in the build stage, which runs first.
  image: maven:3.8.1-openjdk-16
  stage: build
  script:
    - echo "Backend build start"
    - cd backend
    - mvn clean package
    - echo "Compile complete."

backend-test-job:   # This job runs in the test stage.
  image: maven:3.8.1-openjdk-16
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Backend test start"
    - cd backend
    - mvn test
    - echo "test complete."

frontend-build-job:       # This job runs in the build stage, which runs first.
  image: node:14
  stage: build
  script:
    - echo "Frontend build start"
    - cd frontend
    - npm install
    - npm run build --if-present
    - echo "Compile complete."


deploy-job:
  image: python:latest
  stage: deploy
  script:
    - echo "Deploy start"
    - apt-get update -y
    - apt-get install -y unzip
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - aws --version
    - echo "AWS CLI Installed"
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - echo "AWS CLI Configured"
    - aws s3 sync frontend/build/ s3://$AWS_BUCKET_NAME/ --delete
    - aws s3 cp backend/target/my-application.jar s3://$AWS_BUCKET_NAME/TrimTrek.jar
    - aws elasticbeanstalk create-application-version --application-name TrimTrek --version-label 1.0 --source-bundle S3Bucket=$AWS_BUCKET_NAME,S3Key=TrimTrek.jar
    - aws elasticbeanstalk update-environment --application-name TrimTrek --environment-name $EB_ENVIRONMENT_NAME --version-label 1.0
    - echo "Deploy complete."
  only:
    - master  # only trigger this job for the master branch

